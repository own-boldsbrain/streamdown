import { render } from "@testing-library/react";
import { describe, expect, it, vi } from "vitest";
import { Streamdown } from "../index";

// Mock generateText from AI SDK
const mockGenerateText = vi.fn();
vi.mock("ai", () => ({
  generateText: mockGenerateText,
}));

// Mock the OpenAI provider
vi.mock("@ai-sdk/openai", () => ({
  openai: vi.fn(() => ({ model: "gpt-4o" })),
}));

describe("GenerateText Integration with Streamdown", () => {
  it("should render markdown generated by generateText correctly", () => {
    // Mock the generateText response with realistic AI-generated markdown
    const mockMarkdown = `# Generated Holiday

## World Kindness Day

**Date:** March 15th  
**Traditions:**
- Perform random acts of kindness
- Share positive messages on social media
- Organize community service events

This holiday celebrates compassion and empathy in our daily lives.`;

    mockGenerateText.mockResolvedValue({
      text: mockMarkdown,
    });

    // Test that Streamdown can render the generated markdown
    const { container } = render(<Streamdown>{mockMarkdown}</Streamdown>);

    // Verify that Streamdown renders the content
    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    // Check that the content is processed correctly
    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Generated Holiday");
    expect(allText).toContain("World Kindness Day");
    expect(allText).toContain("March 15th");
    expect(allText).toContain("random acts of kindness");
  });

  it("should handle various markdown elements from AI generation", () => {
    const aiGeneratedContent = `# AI-Generated Article

## Introduction

This article was generated by an AI model using \`generateText()\`.

### Key Features

- **Bold text** for emphasis
- *Italic text* for subtlety
- \`inline code\` for technical terms
- [Links](https://example.com) to resources

#### Code Block

\`\`\`typescript
console.log("Hello World");
\`\`\`

> This is a blockquote from the AI.

1. First item
2. Second item
3. Third item

---

End of article.`;

    const { container } = render(<Streamdown>{aiGeneratedContent}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("AI-Generated Article");
    expect(allText).toContain("Introduction");
    expect(allText).toContain("generateText()");
    expect(allText).toContain("Bold text");
    expect(allText).toContain("Italic text");
    expect(allText).toContain("inline code");
    expect(allText).toContain("Links");
    expect(allText).toContain("typescript");
    expect(allText).toContain("Hello World");
    expect(allText).toContain("blockquote");
    expect(allText).toContain("First item");
    expect(allText).toContain("End of article");
  });

  it("should handle incomplete markdown from streaming AI responses", () => {
    // Simulate incomplete markdown that might come from streaming AI
    const incompleteMarkdown = `# Streaming Response

This is a **bold text that is cut off
And here's an incomplete [link
Also an unfinished code block:

\`\`\`javascript
function hello() {
  console.log("Hello`;

    const { container } = render(<Streamdown>{incompleteMarkdown}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Streaming Response");
    // Streamdown may or may not complete incomplete markdown depending on configuration
    expect(allText).toContain("bold text that is cut off");
    expect(allText).toContain("incomplete link");
    expect(allText).toContain("console.log");
  });

  it("should render complex AI-generated content with math and diagrams", () => {
    const complexContent = `# Advanced AI Content

## Mathematics

The Pythagorean theorem: $a^2 + b^2 = c^2$

\`\`\`mermaid
graph TD
    A[Start] --> B{Is it working?}
    B -->|Yes| C[Great!]
    B -->|No| D[Debug]
    D --> B
\`\`\`

## Code Example

\`\`\`python
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)
\`\`\`

This demonstrates the full capabilities of AI-generated content rendering.`;

    const { container } = render(<Streamdown>{complexContent}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Advanced AI Content");
    expect(allText).toContain("Pythagorean theorem");
    expect(allText).toContain("a^2 + b^2 = c^2");
    // Mermaid diagrams show as "Loading diagram..." initially
    expect(allText).toContain("Loading diagram");
    expect(allText).toContain("fibonacci");
    expect(allText).toContain("def fibonacci");
  });
});