import { render } from "@testing-library/react";
import { describe, expect, it, vi } from "vitest";
import { Streamdown } from "../index";

// Mock generateObject from AI SDK
const mockGenerateObject = vi.fn();
vi.mock("ai", () => ({
  generateObject: mockGenerateObject,
}));

// Mock the OpenAI provider
vi.mock("@ai-sdk/openai", () => ({
  openai: vi.fn(() => ({ model: "gpt-4o" })),
}));

// Mock Zod
vi.mock("zod", () => ({
  z: {
    object: vi.fn(() => ({
      describe: vi.fn(),
    })),
    string: vi.fn(() => ({
      describe: vi.fn(),
    })),
    array: vi.fn(() => ({
      describe: vi.fn(),
    })),
  },
}));

describe("GenerateObject Integration with Streamdown", () => {
  it("should render object generated by generateObject correctly", () => {
    // Mock the generateObject response with realistic structured data
    const mockObject = {
      recipe: {
        name: "Classic Lasagna",
        ingredients: [
          "1 lb ground beef",
          "12 lasagna noodles",
          "2 cups ricotta cheese",
          "2 cups mozzarella cheese",
          "1/2 cup parmesan cheese"
        ],
        steps: [
          "Cook the lasagna noodles according to package directions",
          "Brown the ground beef in a large skillet",
          "Mix ricotta, mozzarella, and parmesan cheeses",
          "Layer noodles, meat sauce, and cheese mixture",
          "Bake at 375°F for 25-30 minutes"
        ]
      }
    };

    // Test that Streamdown can render the structured object as markdown
    const markdownContent = `# Classic Lasagna

## Ingredients
- 1 lb ground beef
- 12 lasagna noodles
- 2 cups ricotta cheese
- 2 cups mozzarella cheese
- 1/2 cup parmesan cheese

## Steps
- Cook the lasagna noodles according to package directions
- Brown the ground beef in a large skillet
- Mix ricotta, mozzarella, and parmesan cheeses
- Layer noodles, meat sauce, and cheese mixture
- Bake at 375°F for 25-30 minutes`;

    const { container } = render(<Streamdown>{markdownContent}</Streamdown>);

    // Verify that Streamdown renders the content
    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    // Check that the content is processed correctly
    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Classic Lasagna");
    expect(allText).toContain("ground beef");
    expect(allText).toContain("lasagna noodles");
    expect(allText).toContain("Bake at 375°F");
  });

  it("should handle array output from generateObject", () => {
    const mockArray = [
      {
        name: "Elara Swiftblade",
        class: "warrior",
        description: "A fierce warrior with unmatched sword skills and unyielding courage."
      },
      {
        name: "Mystic Thorne",
        class: "mage",
        description: "A powerful sorcerer who commands the elements with ancient spells."
      },
      {
        name: "Shadow Whisper",
        class: "thief",
        description: "A stealthy rogue who moves like a shadow and strikes unseen."
      }
    ];

    // Convert array to markdown for Streamdown rendering
    const markdownContent = `## Item 1

**name**: Elara Swiftblade
**class**: warrior
**description**: A fierce warrior with unmatched sword skills and unyielding courage.

## Item 2

**name**: Mystic Thorne
**class**: mage
**description**: A powerful sorcerer who commands the elements with ancient spells.

## Item 3

**name**: Shadow Whisper
**class**: thief
**description**: A stealthy rogue who moves like a shadow and strikes unseen.`;

    const { container } = render(<Streamdown>{markdownContent}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Elara Swiftblade");
    expect(allText).toContain("warrior");
    expect(allText).toContain("Mystic Thorne");
    expect(allText).toContain("mage");
    expect(allText).toContain("Shadow Whisper");
    expect(allText).toContain("thief");
  });

  it("should handle enum output from generateObject", () => {
    const mockEnum = "sci-fi";

    // Convert enum to markdown for Streamdown rendering
    const markdownContent = `# Movie Genre Classification

**Genre**: sci-fi

This movie involves space travel, wormholes, and the search for new habitable planets, which are classic elements of science fiction.`;

    const { container } = render(<Streamdown>{markdownContent}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("Movie Genre Classification");
    expect(allText).toContain("sci-fi");
    expect(allText).toContain("space travel");
    expect(allText).toContain("wormholes");
  });

  it("should handle no-schema output from generateObject", () => {
    const mockNoSchema = {
      title: "AI-Generated Content",
      type: "free-form",
      content: {
        summary: "This is unstructured content generated without a predefined schema.",
        tags: ["ai-generated", "no-schema", "flexible"],
        metadata: {
          created: "2024-01-15",
          version: "1.0"
        }
      },
      statistics: {
        wordCount: 42,
        readability: "high"
      }
    };

    // Convert complex object to markdown for Streamdown rendering
    const markdownContent = `# AI-Generated Content

## type
free-form

## content

### summary
This is unstructured content generated without a predefined schema.

### tags
- ai-generated
- no-schema
- flexible

### metadata

#### created
2024-01-15

#### version
1.0

## statistics

### wordCount
42

### readability
high`;

    const { container } = render(<Streamdown>{markdownContent}</Streamdown>);

    const wrapper = container.firstElementChild;
    expect(wrapper).toBeTruthy();

    const allText = wrapper?.textContent || "";
    expect(allText).toContain("AI-Generated Content");
    expect(allText).toContain("free-form");
    expect(allText).toContain("ai-generated");
    expect(allText).toContain("no-schema");
    expect(allText).toContain("2024-01-15");
    expect(allText).toContain("wordCount");
    expect(allText).toContain("42");
  });
});